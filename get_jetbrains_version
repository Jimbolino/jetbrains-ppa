#!/usr/bin/env python3
import argparse
import os
from pathlib import Path
import json
import urllib.request

HERE = os.path.abspath(os.path.dirname(__file__))


class BuildException(Exception):
    pass


def get_latest_release_info(product_code):
    api_url = 'https://data.services.jetbrains.com/products/releases?code={}'
    url = api_url.format(product_code)

    resource = urllib.request.urlopen(url)
    if resource.code != 200:
        raise BuildException(
            "Requesting {} (code={}) failed with the following reason: {}".format(
                url, resource.code, resource.reason
            )
        )

    content = resource.read().decode('UTF-8')
    versions = json.loads(content)[product_code]

    latest_version = versions[0]

    if latest_version['type'] != 'release':
        raise BuildException('Latest version of {} is not a release.'.format(product_code))

    return latest_version

def read_product_code(package_directory):
    api_code_file = Path(HERE, package_directory, 'API_CODE')
    try:
        with api_code_file.open(encoding='UTF-8') as f:
            api_code = f.read().strip()
            return api_code
    except Exception:
        raise BuildException('Make sure the file ${api_code_file} exists.')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('package_directory')
    args = parser.parse_args()

    package_directory = args.package_directory

    product_code = read_product_code(package_directory)
    latest_release_info = get_latest_release_info(product_code)
    print(latest_release_info['version'])

if __name__ == '__main__':
    main()
